#!/usr/bin/env python
from __future__ import print_function

import argparse
import json
from os import path
import requests
import sys
from xdg import BaseDirectory


try:
    import requests.packages.urllib3.contrib.pyopenssl
    requests.packages.urllib3.contrib.pyopenssl.inject_into_urllib3()
except ImportError:
    pass


##Pastes things to zifb.in
def paste(expire=None, language=None, filename=None, tee=True):
    """Pastes things to https://zifb.in"""
    ##Read config from .zifb.in.rc (if it exists)

    config = {}
    for filename in BaseDirectory.load_config_paths('zifbin', 'config.rc'):
        with open(filename) as f:
            config.update(json.load(f))
    if not config:
        try:
            with open(path.join(path.expanduser('~'), '.zifbin.rc')) as f:
                config.update(json.load(f))
        except IOError as e:
            pass
    if 'tee' in config and config['tee'] == True:
        tee = True

    url = 'https://zifb.in/api/v1/paste'
    data = ''

    if filename: 
        try:
            with open(filename) as f:
                data = f.read()
        except:
            print('file not found', file=sys.stderr)
            sys.exit(-1)
    else:
        for line in sys.stdin:
            data += line

    payload = {'paste': data}
    if 'api_key' in config and config.get('api_key') is not None:
        payload['api_key'] = config.get('api_key')
    if 'domain' in config and config.get('domain') is not None:
        payload['domain'] = config.get('domain')

    if expire:
        payload['expiration'] = expire
    else:
        payload['expiration'] = config.get('expiration') if 'expiration' in config else 0

    if language:
        payload['language'] = language


    r = requests.post(url, data=json.dumps(payload))

    output = json.loads(r.text)

    if 'error' in output:
        print('Error: {0}'.format(output.get('error')), file=sys.stderr)
    elif 'paste' in output:
        print(output.get('paste'), file=sys.stderr)

    if tee:
        print(data, end="")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Paste things!")
    parser.add_argument("-e", "--expire", type=int, nargs=1,
                        help="Number of minutes until expiration. Default: 1 week.")
    parser.add_argument("-l", "--language", type=str, nargs=1,
                        help="Sets language. Default: server guesses language using pygments.")
    parser.add_argument("-t", "--tee", default=not sys.stdout.isatty(), const=True, type=bool, nargs="?",
                        help="Sends stdin to stdout, and prints URL on stderr. Default: False for normal usage, True if stdout is not a tty (ie, you're piping output somewhere)")
    parser.add_argument("filename", type=str, nargs='?',
                        help="If ommited, read from stdin.")
    args = parser.parse_args()


    paste(expire=args.expire, language=args.language, tee=args.tee, filename=args.filename)
